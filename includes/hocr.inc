<?php

/**
 * @file
 * Defines the HOCR class which can parse HOCR files as generated by Tesseract.
 */

class HOCR {

  /**
   * The HOCR file.
   * @var DOMDocument
   */
  protected $doc;
  /**
   * The XPath for querying the HOCR file.
   * @var DOMXPath
   */
  protected $xpath;

  /**
   * Instantiates an HOCR object from the given datastream.
   *
   * @param AbstractFedoraDatastream $datastream
   *   The datastream containing the HOCR file.
   *
   * @return HOCR
   *   An object of this class build from the given datastream.
   */
  public static function fromDatastream(AbstractFedoraDatastream $datastream) {

  }

  /**
   * Checks if the given HOCR file is valid.
   *
   * At the moment this only checks if the version is supported but may do more
   * in the future.
   *
   * @param string $file
   *   The absolute path to the HOCR file.
   *
   * @return bool
   *   TRUE if the HOCR file is valid, FALSE otherwise.
   */
  public static function isValid($file) {
    if (file_exists($file)) {
      $version = self::getVersion($file);
      return version_compare($version, TESSERACT_REQUIRED_VERSION) >= 0;
    }
    return FALSE;
  }

  /**
   * Gets the version of the give HOCR file.
   *
   * Parses the meta tags in the given file to determine the version. Older
   * versions of tesseract don't include the version information.
   *
   * @param string $file
   *   The absolute path to the HOCR file.
   *
   * @return string
   *   The version if successful, FALSE otherwise.
   */
  protected static function getVersion($file) {
    @$doc = simplexml_load_file($file);
    $doc->registerXPathNamespace('ns', 'http://www.w3.org/1999/xhtml');
    $version = (string) array_pop($doc->xpath('/ns:html/ns:head/ns:meta[@name="ocr-system"]/@content'));
    $version = str_replace(array('tesseract', ' '), '', $version);
    return empty($version) ? FALSE : $version;
  }

  /**
   * Instantiate an HOCR object.
   *
   * @param string $file
   *   The absolute path to the HOCR file.
   *
   * @throws InvalidArgumentException
   */
  public function __construct($file) {
    if (self::isValid($file)) {
      throw new InvalidArgumentException('Attempted to instantiate HOCR class without a valid HOCR file.');
    }
    $this->doc = new DOMDocument('1.0', 'UTF-8');
    $this->doc->load($file);
    $this->xpath = new DOMXPath($doc);
    $this->xpath->registerNamespace("php", "http://php.net/xpath");
    $this->xpath->registerPhpFunctions('mb_strtolower');
  }

  /**
   * Finds all occurrences of the given term.
   *
   * Performs a exact case-insensitive comparison.
   *
   * @param string $term
   *   The term to search for.
   */
  public function findWords($term) {
    $matches = array();
    $term = mb_strtolower($term);
    $results = $this->xpath->query("//*[php:functionString('mb_strtolower', text()) = '{$term}']");
    // Could make shorter?
    foreach ($results as $result) {
      $properties = $this->getWordProperties($result);
      if ($properties) {
        $matches[] = $properties;
      }
    }
    return $matches;
  }

  /**
   * Gets the word properties for the given element if found.
   *
   * @param DOMElement $element
   *   The element.
   *
   * @return array
   *   The word properties for the given element if found, FALSE otherwise.
   *
   * @see HOCR::getProperties()
   */
  protected function getWordProperties(DOMElement $element) {
    return $this->getClassProperties($element, 'ocrx_word');
  }

  /**
   * Gets the properties for the given element and class.
   *
   * Recursively iterates up the document tree until the given class properties
   * are found.
   *
   * @param DOMElement $element
   *   The element.
   * @param string $class
   *   The class of the properties to find, one of the following:
   *   'ocr_page', 'ocr_carea', 'ocr_par', 'ocr_line', 'ocrx_word'
   *
   * @return array
   *   The class properties for the given element if found, FALSE otherwise.
   *
   * @see HOCR::getProperties()
   */
  protected function getClassProperties(DOMElement $element, $class) {
    $properties = $this->getProperties($element);
    if ($properties['class'] == $class) {
      return $properties;
    }
    if ($element->parentNode) {
      return $this->getClassProperties($element->parentNode, $class);
    }
    return FALSE;
  }

  /**
   * Gets all the defined properties for the given element.
   *
   * @param DOMElement $element
   *   The element.
   *
   * @return array
   *   An associative array of properties as follows:
   *   - id: The id of the given element.
   *   - class: The class of the given element, 'ocrx_word', 'ocr_line', etc.
   *   - dir: The direction of the written text either 'ltr' or 'rtl'.
   *   - bbox: The bounding box  of the given element.
   *     - l: The left most point of the element in pixels.
   *     - t: The top most point of the element in pixels.
   *     - r: The right most point of the element in pixels.
   *     - b: The bottom most point of the element in pixels.
   */
  protected function getProperties(DOMElement $element) {
    $bbox = NULL;
    if ($element->hasAttribute('title')) {
      $matches = array();
      $title = $element->getAttribute('title');
      preg_match('/bbox ([0-9]*) ([0-9]*) ([0-9]*) ([0-9]*)/', $title, $matches);
      $bbox = array(
        'l' => intval($matches[1]),
        't' => intval($matches[2]),
        'r' => intval($matches[3]),
        'b' => intval($matches[4]),
      );
    }
    return array(
      'id' => $element->hasAttribute('id') ? $element->getAttribute('id') : NULL,
      'class' => $element->hasAttribute('class') ? $element->getAttribute('class') : NULL,
      'dir' => $element->hasAttribute('dir') ? $element->getAttribute('dir') : NULL,
      'bbox' => $bbox,
    );
  }
}
